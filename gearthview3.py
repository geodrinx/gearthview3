# -*- coding: utf-8 -*-
"""
/***************************************************************************
 gearthview3
                                 A QGIS plugin
 gearthview3
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-08-27
        git sha              : $Format:%H$
        copyright            : (C) 2018 by geodrinx
        email                : geodrinx@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon, QImage, QPainter, QColor
from PyQt5.QtWidgets import QAction
from PyQt5.QtWidgets import *

from PyQt5.QtCore import *
from PyQt5.QtGui import *


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .gearthview3_dialog import gearthview3Dialog
import os.path

import math

import qgis

from osgeo import gdal, ogr, osr

from qgis.core import (QgsApplication,
                       QgsProject,
                       QgsCoordinateReferenceSystem,
                       QgsCoordinateTransform,
                       QgsVectorLayer,
                       QgsField,
                       QgsFeature,
                       QgsFeatureRequest,
                       QgsRenderContext,
                       QgsExpression,
                       QgsExpressionContext,
                       QgsExpressionContextUtils,
                       QgsCategorizedSymbolRenderer,
                       QgsGraduatedSymbolRenderer,
                       QgsRuleBasedRenderer,
                       QgsVectorFileWriter,
                       QgsRasterFileWriter,
                       QgsRasterPipe,
                       QgsWkbTypes, QgsPointXY, QgsRectangle, QgsApplication)

from PyQt5.QtCore import QSettings, QSize
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsMapLayer, QgsMapSettings, QgsProject, QgsWkbTypes

#from PySide import QtCore, QtGui

import sys, itertools, os, glob, subprocess, zipfile, zlib, tempfile
import platform

#from math import *
import datetime
import time
import codecs

from qgis.core import QgsMapRendererCustomPainterJob

#from sanic import Sanic
#from sanic.response import json

#----------------------------------------------------------------------------
def P3dPoints_Write(self, adesso):	
        
				iface = qgis.utils.iface

				layer = iface.mapCanvas().currentLayer()

				if(layer == None):
				  return(-1)

				crs = layer.crs()

				nomeLayer = str(layer.name())
				filePath = str(layer.source())
				direct = os.path.dirname(filePath)
				out_folder = direct + '/_3dPointsExport'
				
				if not os.path.exists(out_folder):
				   os.mkdir( out_folder )

                             
				nomeGML = ("/GEKml_3dPoints.csv")         				


        #  Apro il file WKT in scrittura
        
				kml=open(out_folder + nomeGML, 'w')

				kml.write ("X,Y,Z,ID,Name,Istr\n")
				# kml.write ("X,Y,Z,ID\n")

				layer = self.iface.mapCanvas().currentLayer()
				
				if layer:
				  if layer.type() == layer.VectorLayer:				
				    
				    name = layer.source();
				    nomeLayer = layer.name()
				    nomeLay   = nomeLayer.replace(" ","_")

#--------------------------------------------------------
				    if (adesso == "GEKml_Polygons"):
            
#				      print "CREO UN MEMORY LAYER DI POLIGONI"

				      geomType = ("Polygon" + '?crs=%s') %(crs.authid())
				      DronePlan = "GEKml_Extrusions"            
				      memLay_Tin = QgsVectorLayer(geomType, DronePlan, 'memory') 
				      memprovider_Tin = memLay_Tin.dataProvider()

				      memLay_Tin.updateExtents()
				      memLay_Tin.commitChanges()
#				      QgsMapLayerRegistry.instance().addMapLayer(memLay_Tin)
				      QgsProject.instance().addMapLayer(memLay_Tin)                      
				      res = memprovider_Tin.addAttributes( [ QgsField("ID",  QVariant.Int), QgsField("height", QVariant.Double), QgsField("baseZ",  QVariant.Double), QgsField("Name",  QVariant.String) ] )

				    idx = layer.fields().indexFromName('Name')
                    

				    height = 0
				    baseZ  = 0
				    num = 0 				                				    				    
				    iter = layer.getFeatures()            				    
				    for feat in iter:

				      num = num + 1 				                  				      
				      # fetch geometry
				      geom = feat.geometry()

				      Name = feat.attributes()[idx]              

#				      print Name
				      
				      testoWKT = geom.asWkt() + "\n"

#				      print testoWKT

				      istr = testoWKT.split(' ')
				      Z = str(istr[3])
				      Z = Z.replace(',','')
				      istruz = str(num) + "," + Name + "," + str(istr[0])

#				      print istruz



				      if (str(istr[0]) == "PolygonZ" and adesso == "GEKml_Polygons"):

#				         print "---scrivo un elemento poligono"
                 
				         feature = QgsFeature()              

				         feature.setGeometry( geom ) 

				         feature.initAttributes(4)

				         ID = num

#  RoofType;	// 0 = flat, 1 = shed, 2 = gable, 3 = hip
# h ttp://wiki.openstreetmap.org/wiki/OSM-4D/Roof_table

#				         RoofType = Name

#				         if (height == 0 and Z > 0):
				         if (float(Z) > 0):
#				            print Z                 
				            height = float(Z)
                         				  
				         values = [(ID), (height), (baseZ), (Name)]                  

				         feature.setAttributes(values) 

				         memprovider_Tin.addFeatures([feature])


                                          
				      testoWKT = testoWKT.replace("PointZ (", "")
				      testoWKT = testoWKT.replace("LineStringZ (", "")
				      testoWKT = testoWKT.replace("PolygonZ ((", "")              

				      testoWKT = testoWKT.replace("Polygon ((", "")

				      testoWKT = testoWKT.replace(", ", ",istruzione\n")              
              
				      testoWKT = testoWKT.replace("))", ",istruzione")
				      testoWKT = testoWKT.replace(")", ",istruzione")
				      testoWKT = testoWKT.replace(" ", ",")
              
				      testoWKT = testoWKT.replace("istruzione", istruz)

				      kml.write (testoWKT)

				      if (str(istr[0]) == "PointZ" and adesso == "GEKml_Polygons"):
				         splitta = testoWKT.split(',')              
				         baseZ = splitta[2]

				      if (str(istr[0]) == "LineStringZ" and adesso == "GEKml_Polygons"):
				         splitta = testoWKT.split(',')              
				         height = splitta[7]
				        				        
				kml.close()

				if (adesso == "GEKml_Polygons"):
				   memLay_Tin.updateFields()
#				   tumpdir = unicode(QFileInfo(QgsApplication.qgisUserDbFilePath()).path()) + "/python/plugins/gearthview/_WebServer"
				   tumpdir = unicode(QFileInfo(QgsApplication.qgisUserDatabaseFilePath()).path()) + "/python/plugins/gearthview/_WebServer"                              
				   nomeqml = tumpdir + "/GEKml_Extrusions.qml"            
				   nomeqml.replace("\\", "/")

				   result = memLay_Tin.loadNamedStyle(nomeqml)


				return(0)    

# -------------------------------------------
def GDX_Publisher(self):

#				print ("GDX_Publisher -------------------------------\n")


				tumpdir = unicode(QFileInfo(QgsApplication.qgisUserDatabaseFilePath()).path()) + "/python/plugins/gearthview3/_WebServer"

#				print (tumpdir)

				adesso = str(datetime.datetime.now())
				adesso = adesso.replace(" ","_")
				adesso = adesso.replace(":","_")
				adesso = adesso.replace(".","_")        				

#				print ("adesso: <%s>\n" %(adesso))

# HERE IT DELETES THE OLD IMAGE ------------------------------------
# (if you comment these, images still remain ...  :)
				for filename in glob.glob(str(tumpdir + '/*.png')) :
				   os.remove( str(filename) )
				for filename in glob.glob(str(tumpdir + '/*.pngw')) :
				   os.remove( str(filename) )            
# ------------------------------------------------------------------		

				mapCanvas = self.iface.mapCanvas()

				text = mapCanvas.extent().toString()
				text1 = text.replace("," , " ")
				text2 = text1.replace(" : ", ",")

#				print ("extent: <%s>\n" %(text2))

				layer = mapCanvas.currentLayer()        

#				print ("Layer: <%s>\n" %(layer.name() ))


				extent = mapCanvas.extent()
				crsSrc = mapCanvas.mapSettings().destinationCrs()
				crsDest = QgsCoordinateReferenceSystem(4326)        

				try:
				   transform = QgsCoordinateTransform(crsSrc, crsDest,
                                               QgsProject.instance())
				except:
				   transform = QgsCoordinateTransform(crsSrc, crsDest)

				projectedExtent = transform.transformBoundingBox(extent)


				x1 = projectedExtent.xMinimum()
				y1 = projectedExtent.yMinimum()
				
				x2 = projectedExtent.xMaximum()
				y2 = projectedExtent.yMinimum()

				x3 = projectedExtent.xMaximum()
				y3 = projectedExtent.yMaximum()

				x4 = projectedExtent.xMinimum()
				y4 = projectedExtent.yMaximum()

				xc = (x1 + x3) / 2.
				yc = (y1 + y3) / 2.	

                
				out_folder = tumpdir

				# create output image and initialize it       

				mapRect = mapCanvas.extent()
				width = mapCanvas.width()
				height = mapCanvas.height()
				srs = mapCanvas.mapSettings().destinationCrs()        

#				print (width, height)
        
        
# MINORU
#				canvas = mapCanvas
##				image = QImage(size.width(), size.height(), QImage.Format_ARGB32_Premultiplied)
#				image = QImage(QSize(math.ceil(width), math.ceil(height)), QImage.Format_ARGB32)
#				image.fill(Qt.transparent)
##				image.fill(QColor(0))
#				painter = QPainter()
#				painter.setRenderHint(QPainter.Antialiasing, True)
#				painter.setRenderHint(QPainter.TextAntialiasing, True)
#				painter.setRenderHint(QPainter.SmoothPixmapTransform, True)
##				painter.setRenderHint(QPainter.transparent, True)
#                
##				brush = QtGui.QBrush()
##				brush.setColor(QtGui.QColor(0))
##				painter.setBackground(self, 0)                                
#
#				painter.begin(image)
#				canvas.render(painter)
#				painter.end()
# MINORU        

# MINORU2

#				settings = self.exportSettings.mapSettings
                
				settings = QgsMapSettings()
#				extent = settings.extent()
				extent = mapCanvas.extent()
                
				# store old map settings
#				old_outputSize = settings.outputSize()
#				old_extent = settings.extent()
#				old_rotation = settings.rotation()
#				old_layers = settings.layers()
#				old_backgroundColor = settings.backgroundColor()

				# map settings
				settings.setOutputSize(QSize(width, height))
#				settings.setExtent(extent.unrotatedRect())
#				settings.setRotation(extent.rotation())

#				if layerids:
#				   settings.setLayers(tools.getLayersByLayerIds(layerids))

#				if transp_background:
				settings.setBackgroundColor(QColor(Qt.transparent))

				has_pluginlayer = False
				for layer in settings.layers():
				   if layer and layer.type() == QgsMapLayer.PluginLayer:
				      has_pluginlayer = True
				      break

				# create an image
				image = QImage(width, height, QImage.Format_ARGB32_Premultiplied)
				painter = QPainter()
				painter.begin(image)
#				if antialias:
#				   painter.setRenderHint(QPainter.Antialiasing)

				# rendering
				job = QgsMapRendererCustomPainterJob(settings, painter)
				if has_pluginlayer:
				   job.renderSynchronously()   # use this method so that TileLayerPlugin layer is rendered correctly
				else:
				   job.start()
				   job.waitForFinished()
				painter.end()

				# restore map settings
#				settings.setOutputSize(old_outputSize)
#				settings.setExtent(old_extent)
#				settings.setRotation(old_rotation)
#				settings.setLayers(old_layers)
#				settings.setBackgroundColor(old_backgroundColor)

# MINORU2
				
				kml = codecs.open(out_folder + '/doc.kml', 'w', encoding='utf-8')
        
				kml.write('<?xml version="1.0" encoding="UTF-8"?>\n')
				kml.write('<kml xmlns="http://www.opengis.net/kml/2.2" xmlns:gx="http://www.google.com/kml/ext/2.2" xmlns:kml="http://www.opengis.net/kml/2.2" xmlns:atom="http://www.w3.org/2005/Atom">\n')				
				kml.write('    <Document>\n')
				kml.write('    	 <name>QGisView</name>\n')
				kml.write('    	 <Snippet maxLines="0"></Snippet>\n') 

#				loc = ("    	 <description><![CDATA[https://map.what3words.com/%.7lf,%.7lf]]></description>\n") %(yc, xc)

#				kml.write(loc)
				
				kml.write('	     <open>1</open>\n')

				kml.write('	<Style id="sh_style">\n')
				kml.write('		<PolyStyle>\n')
				kml.write('			<color>7fff8080</color>\n')
				kml.write('		</PolyStyle>\n')
				kml.write('	</Style>\n')
				kml.write('	<StyleMap id="msn_style">\n')
				kml.write('		<Pair>\n')
				kml.write('			<key>normal</key>\n')
				kml.write('			<styleUrl>#sn_style</styleUrl>\n')
				kml.write('		</Pair>\n')
				kml.write('		<Pair>\n')
				kml.write('			<key>highlight</key>\n')
				kml.write('			<styleUrl>#sh_style</styleUrl>\n')
				kml.write('		</Pair>\n')
				kml.write('	</StyleMap>\n')
				kml.write('	<Style id="sn_style">\n')
				kml.write('		<PolyStyle>\n')
				kml.write('			<color>00ff8080</color>\n')
				kml.write('			<fill>0</fill>\n')
				kml.write('		</PolyStyle>\n')
				kml.write('	</Style>\n')   

				kml.write('	     <Style id="sh_ylw-pushpin">\n')
				kml.write('	     	<IconStyle>\n')
				kml.write('	     		<scale>1.2</scale>\n')
				kml.write('	     	</IconStyle>\n')
				kml.write('	     	<PolyStyle>\n')
				kml.write('	     		<fill>0</fill>\n')
				kml.write('	     	</PolyStyle>\n')
				kml.write('	     </Style>\n')
				kml.write('	     <Style id="sn_ylw-pushpin">\n')
				kml.write('	     	<PolyStyle>\n')
				kml.write('	     		<fill>0</fill>\n')
				kml.write('	     	</PolyStyle>\n')
				kml.write('	     </Style>\n')
				kml.write('	     <StyleMap id="msn_ylw-pushpin">\n')
				kml.write('	     	<Pair>\n')
				kml.write('	     		<key>normal</key>\n')
				kml.write('	     		<styleUrl>#sn_ylw-pushpin</styleUrl>\n')
				kml.write('	     	</Pair>\n')
				kml.write('	     	<Pair>\n')
				kml.write('	     		<key>highlight</key>\n')
				kml.write('	     		<styleUrl>#sh_ylw-pushpin</styleUrl>\n')
				kml.write('	     	</Pair>\n')
				kml.write('	     </StyleMap>\n')				

				kml.write('    <StyleMap id="msn_style">\n')
				kml.write('        <Pair>\n')
				kml.write('            <key>normal</key>\n')
				kml.write('            <styleUrl>#sn_style</styleUrl>\n')
				kml.write('        </Pair>\n')
				kml.write('        <Pair>\n')
				kml.write('            <key>highlight</key>\n')
				kml.write('            <styleUrl>#sh_style</styleUrl>\n')
				kml.write('        </Pair>\n')
				kml.write('    </StyleMap>\n')
				
				kml.write('	     	<Style id="hl">\n')
				kml.write('	     		<IconStyle>\n')
				kml.write('	     			<scale>0.7</scale>\n')
				kml.write('	     			<Icon>\n')
				kml.write('	     				<href>http://maps.google.com/mapfiles/kml/shapes/placemark_circle_highlight.png</href>\n')
				kml.write('	     			</Icon>\n')
				kml.write('	     		</IconStyle>\n')
				kml.write('	     		<LabelStyle>\n')
				kml.write('	     			<scale>0.7</scale>\n')
				kml.write('	     		</LabelStyle>\n')							
				kml.write('	     		<ListStyle>\n')
				kml.write('	     		</ListStyle>\n')
				kml.write('	     	</Style>\n')
				kml.write('	     	<Style id="default">\n')
				kml.write('	     		<IconStyle>\n')
				kml.write('	     			<scale>0.7</scale>\n')
				kml.write('	     			<Icon>\n')
				kml.write('	     				<href>http://maps.google.com/mapfiles/kml/shapes/placemark_circle.png</href>\n')
				kml.write('	     			</Icon>\n')
				kml.write('	     		</IconStyle>\n')
				kml.write('	     		<LabelStyle>\n')
				kml.write('	     			<scale>0.7</scale>\n')
				kml.write('	     		</LabelStyle>\n')			
				kml.write('	     		<ListStyle>\n')
				kml.write('	     		</ListStyle>\n')
				kml.write('	     	</Style>\n')
				kml.write('	     	<StyleMap id="default0">\n')
				kml.write('	     		<Pair>\n')
				kml.write('	     			<key>normal</key>\n')
				kml.write('	     			<styleUrl>#default</styleUrl>\n')
				kml.write('	     		</Pair>\n')
				kml.write('	     		<Pair>\n')
				kml.write('	     			<key>highlight</key>\n')
				kml.write('	     			<styleUrl>#hl</styleUrl>\n')
				kml.write('	     		</Pair>\n')
				kml.write('	     	</StyleMap>\n')				
				
				rotazio = 0.0
                
				rotazio = -(mapCanvas.rotation())

				
				
				kml.write('      <Folder>\n')
				
				xc = (x1 + x3) / 2.
				yc = (y1 + y3) / 2.
				dx = (x3 - x1) * 75000. #100000.


				kml.write('    		<open>1</open>\n')    
				kml.write('    		<NetworkLink>\n')
				kml.write('    		   <name>QGIS_link</name>\n')
				kml.write('    		   <visibility>1</visibility>\n')
				kml.write('    		   <open>1</open>\n')
				kml.write('    		   <Link>\n')
				kml.write('    		      <href>QGIS_link.kmz</href>\n')        
				kml.write('    		   </Link>\n')
				kml.write('    		</NetworkLink>\n')        

        				
				kml.write('    		<LookAt>\n')
				stringazza = ("    		   <longitude>%lf</longitude>\n") %(xc)
				kml.write(stringazza)				
				stringazza = ("    		   <latitude>%lf</latitude>\n") %(yc)
				kml.write(stringazza)				
				kml.write('    		   <altitude>0</altitude>\n')

				stringazza = ("    		   <heading>%lf</heading>\n") %(rotazio)
				kml.write(stringazza)
        
				kml.write('    		   <tilt>0</tilt>\n')
				stringazza = ("    		   <range>%lf</range>\n") %(dx)
				kml.write(stringazza)				
				kml.write('    		   <gx:altitudeMode>relativeToGround</gx:altitudeMode>\n')
				kml.write('    		</LookAt>\n')

				kml.write('      <GroundOverlay>\n')
				kml.write('    	 <name>QGisView</name>\n')
        				
				kml.write('    	<Icon>\n')


				xN = projectedExtent.xMinimum()
				yN = projectedExtent.yMinimum()

				nomePNG = ("QGisView_%lf_%lf_%s") % (xN, yN, adesso)
				stringazza = ("    	<href>%s.png</href>\n") % (nomePNG)
				kml.write(stringazza)
				kml.write('    		<viewBoundScale>1.0</viewBoundScale>\n')
				kml.write('    	</Icon>\n')
				kml.write('    	<gx:LatLonQuad>\n')
				kml.write('    		<coordinates>\n')

				stringazza =    ("%.7lf,%.7lf,0 %.7lf,%.7lf,0 %.7lf,%.7lf,0 %.7lf,%.7lf,0\n") % (x1, y1, x2, y2, x3, y3, x4, y4)        		
				kml.write(stringazza)				

				kml.write('    		</coordinates>\n')
				kml.write('    	</gx:LatLonQuad>\n')
				kml.write('    </GroundOverlay>\n')



				#Export tfw-file
				xScale = (projectedExtent.xMaximum() - projectedExtent.xMinimum()) /  image.width()
				yScale = (projectedExtent.yMaximum() - projectedExtent.yMinimum()) /  image.height()

							
				f = open(out_folder + "/" + nomePNG	+ ".pngw", 'w')				
				f.write(str(xScale) + '\n')
				f.write(str(0) + '\n')
				f.write(str(0) + '\n')
				f.write('-' + str(yScale) + '\n')
				f.write(str(projectedExtent.xMinimum()) + '\n')
				f.write(str(projectedExtent.yMaximum()) + '\n')
				f.write(str(projectedExtent.xMaximum()) + '\n')
				f.write(str(projectedExtent.yMinimum()))				
				f.close()


				
				input_file = out_folder + "/" + nomePNG + ".png"
				
				#Save the image
				image.save(input_file, "png")			

				nomeLay = "gearthview" 	 # foo default name		


#  Adesso scrivo il vettoriale
#  Prendo il sistema di riferimento del Layer selezionato ------------------
        
        
				curLayer = mapCanvas.currentLayer()

				iface = qgis.utils.iface
       
				selectedLayers = iface.layerTreeView().selectedLayers()
        
				if(not selectedLayers):
#				   print ("selectedLayers is Empty")        
				   selectedLayers = []
				   selectedLayers.append(curLayer)

				for layer in selectedLayers:        
        
				 if layer:
          
				  if layer.type() == layer.VectorLayer:				

				    name = layer.source();
				    nomeLayer = layer.name()
				    nomeLay   = nomeLayer.replace(" ","_")

#				    print(layer.name()) 


				    kml.write('    <Folder>\n')
				    stringazza =   ('			<name>%s</name>\n') % (nomeLay)
				    kml.write (stringazza)   

				    crsSrc = layer.crs();

				    crsDest = QgsCoordinateReferenceSystem(4326)  # Wgs84LLH
				    xform = QgsCoordinateTransform(crsSrc, crsDest,
                                               QgsProject.instance())

#----------------------------------------------------------------------------
#  Trasformo la finestra video in coordinate layer, 
#     per estrarre solo gli elementi visibili
#----------------------------------------------------------------------------
#				    mapCanvas = iface.mapCanvas()
				    boundBox = mapCanvas.extent() 
                
				    xMin = float(boundBox.xMinimum())
				    yMin = float(boundBox.yMinimum())

				    xMax = float(boundBox.xMaximum())                
				    yMax = float(boundBox.yMaximum())
				    
				    
				    crs2 = mapCanvas.mapSettings().destinationCrs()
				    crsSrc2  = QgsCoordinateReferenceSystem(crs2.authid())   
				    crsDest2 = QgsCoordinateReferenceSystem(layer.crs())   
				    xform2   = QgsCoordinateTransform(crsSrc2, crsDest2,
                                               QgsProject.instance())

				    pt0 = xform2.transform(QgsPointXY(xMin, yMin))
				    pt1 = xform2.transform(QgsPointXY(xMax, yMax))

				    rect = QgsRectangle(pt0, pt1)

#				    print ("pt0x: <%s>" %(str(pt0.x())) )
#				    print ("pt0y: <%s>" %(str(pt0.y())) )
#				    print ("pt1x: <%s>" %(str(pt1.x())) )
#				    print ("pt1y: <%s>" %(str(pt1.y())) )

				    rq = QgsFeatureRequest(rect)

				    iter = layer.getFeatures(rq)
            				    
				    for feat in iter:

				      nele = feat.id()

				      # fetch geometry
				      geom = feat.geometry()
				      # show some information about the feature

#				      print (("GeomType: %d") %(geom.type()))

				      if geom.type() == 0:
                      
				        elem = geom.asPoint()
				        x1 = elem.x()
				        y1 = elem.y()

#				        pt1 = xform.transform(QgsPoint(x1, y1))

				        kml.write ('	<Placemark>\n')
				        
				        stringazza =   ('		<name>%s</name>\n') % (nele)
				        kml.write (stringazza)	
                			        
				        kml.write ('	<styleUrl>#default0</styleUrl>\n')

# DESCRIPTION DATA-----------
				        kml.write ('	<Snippet maxLines="0"></Snippet>\n')
				        kml.write ('	<description><![CDATA[\n')				        
				        kml.write ('<html><body><table border="1">\n')
				        kml.write ('<tr><th>Field Name</th><th>Field Value</th></tr>\n')
 
 # Prendo il contenuto dei campi -------------
				        fff = feat.fields()
				        num = fff.count()                
				        iii = -1
				        for f in layer.fields(): 				        
				           iii = iii + 1
				           
				           stringazza = ('<tr><td>%s</td><td>%s</td></tr>\n') %(f.name(),feat[iii])

				           kml.write (stringazza)					           
               	
				        kml.write ('</table></body></html>\n')
				        kml.write (']]></description>\n')
				       
# EXTENDED DATA -------------			
				        stringazza =   ('		<ExtendedData><SchemaData schemaUrl="#%s">\n') % (nomeLay)
				        kml.write (stringazza)                 	        

## Prendo il contenuto dei campi -------------
				        fff = feat.fields()
				        num = fff.count()                
				        iii = -1
				        for f in layer.fields(): 				        
				           iii = iii + 1
				           
				           stringazza = ('				<SimpleData name="%s">%s</SimpleData>\n') %(f.name(),feat[iii])

				           if (stringazza.find('<SimpleData name="descrip') == -1):
				              kml.write (stringazza)					           
                				        
				        kml.write ('		</SchemaData></ExtendedData>\n')				        
# EXTENDED DATA -------------            
                

				        wkt = layer.crs().toWkt()
				        source = osr.SpatialReference()
				        source.ImportFromWkt(wkt)

				        target = osr.SpatialReference()
				        target.ImportFromEPSG(4326)

				        transform = osr.CoordinateTransformation(source, target)

				        testo = geom.asWkt()                         
#				        print (testo)

				        testo = testo.replace("PointZ (", "Point (")
				        testo = testo.replace("PointZM (", "Point (")   
				        testo = testo.replace(" 0,", ",")
				        testo = testo.replace(" 0)", ")")   

				        geometra = ogr.CreateGeometryFromWkt(testo)
				        geometra.Transform(transform)
				        testoKML = geometra.ExportToKML()
				        kml.write (testoKML)


				        kml.write ('	</Placemark>\n')
                        
				      elif geom.type() == 1:

				        elem = geom.asPolyline()

				        kml.write ('	<Placemark>\n')
				        
				        stringazza =   ('		<name>%s</name>\n') % (nele)
				        kml.write (stringazza)	
                			        
				        kml.write ('	<styleUrl>#default0</styleUrl>\n')

# DESCRIPTION DATA-----------
				        kml.write ('	<Snippet maxLines="0"></Snippet>\n')
				        kml.write ('	<description><![CDATA[\n')				        
				        kml.write ('<html><body><table border="1">\n')
				        kml.write ('<tr><th>Field Name</th><th>Field Value</th></tr>\n')
 
 # Prendo il contenuto dei campi -------------
				        fff = feat.fields()
				        num = fff.count()                
				        iii = -1
				        for f in layer.fields(): 				        
				           iii = iii + 1
				           
				           stringazza = ('<tr><td>%s</td><td>%s</td></tr>\n') %(f.name(),feat[iii])

				           kml.write (stringazza)					           
               	
				        kml.write ('</table></body></html>\n')
				        kml.write (']]></description>\n')
				       
# EXTENDED DATA -------------			
				        stringazza =   ('		<ExtendedData><SchemaData schemaUrl="#%s">\n') % (nomeLay)
				        kml.write (stringazza)                 	        

## Prendo il contenuto dei campi -------------
				        fff = feat.fields()
				        num = fff.count()                
				        iii = -1
				        for f in layer.fields(): 				        
				           iii = iii + 1
				           
				           stringazza = ('				<SimpleData name="%s">%s</SimpleData>\n') %(f.name(),feat[iii])

				           if (stringazza.find('<SimpleData name="descrip') == -1):
				              kml.write (stringazza)					           
                				        
				        kml.write ('		</SchemaData></ExtendedData>\n')				        
# EXTENDED DATA -------------	            
                

				        wkt = layer.crs().toWkt()
				        source = osr.SpatialReference()
				        source.ImportFromWkt(wkt)

				        target = osr.SpatialReference()
				        target.ImportFromEPSG(4326)

				        transform = osr.CoordinateTransformation(source, target)

				        testo = geom.asWkt()                         
#				        print (testo)

				        testo = testo.replace("LineStringZ (", "LineString (")
				        testo = testo.replace("LineStringZM (", "LineString (")   
				        testo = testo.replace(" 0,", ",")
				        testo = testo.replace(" 0)", ")")   

				        geometra = ogr.CreateGeometryFromWkt(testo)
				        geometra.Transform(transform)
				        testoKML = geometra.ExportToKML()
				        kml.write (testoKML)


				        kml.write ('	</Placemark>\n')

				      elif geom.type() == 2:

				        kml.write ('	<Placemark>\n')

				        stringazza =   ('		<name>%s</name>\n') % (nele)
				        kml.write (stringazza)				        
				        kml.write ('		<styleUrl>#msn_style</styleUrl>\n')

# DESCRIPTION DATA-----------
				        kml.write ('	<Snippet maxLines="0"></Snippet>\n')
				        kml.write ('	<description><![CDATA[\n')				        
				        kml.write ('<html><body><table border="1">\n')
				        kml.write ('<tr><th>Field Name</th><th>Field Value</th></tr>\n')
 
 # Prendo il contenuto dei campi -------------
				        fff = feat.fields()
				        num = fff.count()                
				        iii = -1
				        for f in layer.fields(): 				        
				           iii = iii + 1
				           
				           stringazza = ('<tr><td>%s</td><td>%s</td></tr>\n') %(f.name(),feat[iii])

				           kml.write (stringazza)					           
               	
				        kml.write ('</table></body></html>\n')
				        kml.write (']]></description>\n')
				       
# EXTENDED DATA -------------			
				        stringazza =   ('		<ExtendedData><SchemaData schemaUrl="#%s">\n') % (nomeLay)
				        kml.write (stringazza)                 	        

## Prendo il contenuto dei campi -------------
				        fff = feat.fields()
				        num = fff.count()                
				        iii = -1
				        for f in layer.fields(): 				        
				           iii = iii + 1
				           
				           stringazza = ('				<SimpleData name="%s">%s</SimpleData>\n') %(f.name(),feat[iii])

				           if (stringazza.find('<SimpleData name="descrip') == -1):
				              kml.write (stringazza)					           
                				        
				        kml.write ('		</SchemaData></ExtendedData>\n')				        
# EXTENDED DATA -------------

				        testo = geom.asWkt() 
#				        print (testo)

				        wkt = layer.crs().toWkt()
				        source = osr.SpatialReference()
				        source.ImportFromWkt(wkt)

				        target = osr.SpatialReference()
				        target.ImportFromEPSG(4326)

				        transform = osr.CoordinateTransformation(source, target)

				        testo = testo.replace("PolygonZ (", "Polygon (")
				        testo = testo.replace("PolygonZM (", "Polygon (")   
				        testo = testo.replace(" 0,", ",")
				        testo = testo.replace(" 0)", ")")                
				        geometra = ogr.CreateGeometryFromWkt(testo)
				        geometra.Transform(transform)                
				        testoKML = geometra.ExportToKML()

				        testoKML = testoKML.replace("<Polygon>", "<Polygon><altitudeMode>relativeToGround</altitudeMode>")

				        kml.write (testoKML)

				        kml.write ('	</Placemark>\n')
				        
				    kml.write ('  </Folder>\n')
					    
				    
				kml.write ('</Folder>\n')
        
				kml.write ('</Document>\n')        
				kml.write ('</kml>\n')
				kml.close()                        


				if platform.system() == "Windows":            
						os.startfile(out_folder + '/doc.kml')
						
				if platform.system() == "Darwin":			
						os.system("open " + str(out_folder + '/doc.kml'))
						
				if platform.system() == "Linux":            
						os.system("xdg-open " + str(out_folder + '/doc.kml'))		
            
            

# -------------------------------------------
class gearthview3:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'gearthview3_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = gearthview3Dialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&gearthview3')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'gearthview3')
        self.toolbar.setObjectName(u'gearthview3')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('gearthview3', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def geodrinx_add_submenu(self, submenu):
		   if self.geodrinx_menu != None:
			   self.geodrinx_menu.addMenu(submenu)
		   else:
			   self.iface.addPluginToMenu("geodrinx", submenu.menuAction())


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # Uncomment the following two lines to have GEODRINX accessible from a top-level menu
        self.geodrinx_menu = QMenu(QCoreApplication.translate("geodrinx", "GEODRINX"))
        self.iface.mainWindow().menuBar().insertMenu(self.iface.firstRightStandardMenu().menuAction(), self.geodrinx_menu)

        # SentinelView Submenu
        self.gearthview3_menu = QMenu(QCoreApplication.translate("geodrinx", "&GEarth"))
        self.geodrinx_add_submenu(self.gearthview3_menu)

        icon = QIcon(os.path.dirname(__file__) + "/icons/mmqgis_animate_columns.png")
        self.run_action = QAction(icon, "GEarthView", self.iface.mainWindow())
        self.run_action.triggered.connect(self.run)
        self.gearthview3_menu.addAction(self.run_action)

        icon = QIcon(os.path.dirname(__file__) + "/icons/iconP.png")
        self.PasteFromGE_action = QAction(icon, "PasteFromGE", self.iface.mainWindow())
        self.PasteFromGE_action.triggered.connect(self.PasteFromGE)
        self.gearthview3_menu.addAction(self.PasteFromGE_action)


        icon = QIcon(os.path.dirname(__file__) + "/icons/iconA.png")
        self.aboutAction = QAction(icon, "About", self.iface.mainWindow())
        self.aboutAction.triggered.connect(self.about)
        self.gearthview3_menu.addAction(self.aboutAction)


        icon_path = ':/plugins/gearthview3/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'gearthview3'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&gearthview3'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def about(self):

        html = '<div class="column-center-inner">'
        html = html + '<div class="main section" id="main" name="Principale"><div class="widget Blog" data-version="1" id="Blog1">'
        html = html + '<div class="blog-posts hfeed"><div class="date-outer"><h2 class="date-header"><span>2018-09-01</span></h2><div class="date-posts"><div class="post-outer">'
        html = html + '<div class="post hentry uncustomized-post-template" itemprop="blogPost" itemscope="itemscope" itemtype="http://schema.org/BlogPosting">'
        html = html + '<meta content="GeoDrinX_theStory_copertina_IMG_2759.JPG" itemprop="image_url">'
        html = html + '<meta content="487125219774924662" itemprop="blogId">'
        html = html + '<meta content="4731451121305966553" itemprop="postId">'
        html = html + '<a name="4731451121305966553"></a>'
        html = html + '<h3 class="post-title entry-title" itemprop="name">GEarthView plugin per QGIS 3</h3><div class="post-header">'
        html = html + '<div class="post-header-line-1"></div>'
        html = html + '</div>'
        html = html + '<div class="post-body entry-content" id="post-body-4731451121305966553" itemprop="description articleBody">'
        html = html + '<div style="text-align: center;">'
        html = html + '<span style="font-size: large;">Iniziato il <b>porting</b> di <a href="https://plugins.qgis.org/plugins/popular/" target="_blank"><b>GEarthView</b> plugin</a> per <a href="https://qgis.org/it/site/" target="_blank"><b>QGIS 3</b></a>.</span></div>'
        html = html + '<div style="text-align: justify;">'
        html = html + '<br>'
        html = html + '<div style="text-align: justify;">'
        html = html + '<span style="font-size: large;"><span style="font-size: small;">&nbsp;Il'
        html = html + ' mondo attende questo evento con ansia&nbsp; :)&nbsp;&nbsp;&nbsp; Chi vuole contribuire allo'
        html = html + ' sviluppo puo farlo anche non solo moralmente, seguendo il seguente '
        html = html + 'link:</span></span></div>'
        html = html + '<div style="text-align: justify;">'
        html = html + '<br></div>'
        html = html + '<div style="text-align: center;">'
        html = html + '<span style="font-size: large;"><span style="font-size: small;"><span style="font-size: large;"><b><a data-saferedirecturl="https://www.google.com/url?hl=it&amp;q=https://paypal.me/pools/c/83roK7pmAK&amp;source=gmail&amp;ust=1523474440605000&amp;usg=AFQjCNFYnkThVKNNYKwOH3Qnkq_Ff2UviQ" href="https://paypal.me/pools/c/83roK7pmAK" target="_blank">https://paypal.me/pools/c/<wbr>83roK7pmAK</a></b></span> </span></span></div>'
#        html = html + '<br></div>'
#        html = html + '<div class="separator" style="clear: both; text-align: center;">'
#        html = html + '<a href="https://4.bp.blogspot.com/-aiKys-7BG-o/Ws0QaCRkBQI/AAAAAAAAB5o/JxDFEf6EvZMOHektL1EGi1kaT_rcr4JQwCLcBGAs/s1600/GeoDrinX_theStory_copertina_IMG_2759.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="file:///.GeoDrinX_theStory_copertina_IMG_2759.JPG" width="480" height="640" border="0"></a></div>'
        html = html + '<div style="text-align: justify;">'
        html = html + '<br></div>'
        html = html + '<div style="text-align: justify;">'
        html = html + '<br></div>'
        html = html + '<div style="text-align: justify;">'
        html = html + '<span style="font-size: large;"><span style="font-size: small;">Grandioso ! &nbsp; Grazie.</span></span></div>'
        html = html + '<div style="text-align: justify;">'
        html = html + '<br></div>'
        html = html + '<div style="text-align: justify;">'
        html = html + '<span style="font-size: large;"><span style="font-size: small;">A presto </span></span></div>'
        html = html + '<div style="text-align: justify;">'
        html = html + '<br></div>'
        html = html + '<div style="text-align: justify;">'
        html = html + '<span style="font-size: large;"><span style="font-size: small;"><b>GeoDrinX </b></span></span></div>'
        html = html + '<div style="text-align: justify;">'
        html = html + '</div>'
        html = html + '<div style="clear: both;"></div>'
        html = html + '</div>'

        infoString = QCoreApplication.translate('GEarthView3', html )

        window = self.iface.mainWindow()

#        pixmap = window.icon.pixmap(QtCore.QSize(150, 150))
#        pixmap = window.pixmap(QtCore.QSize(150, 150))        
#        msgBox.setIconPixmap(pixmap)
#        msgBox.setWindowIcon(self.window.icon)


        QMessageBox.information(window, "About GEarthView3 plugin", infoString)

        window.label = QLabel()
        window.label.setGeometry(QtCore.QRect(23, 25, 429, 478))
        window.label.setText("")
        window.label.setPixmap(QPixmap("GeoDrinX_theStory_copertina_IMG_2759.JPG"))
        window.label.setScaledContents(True)


# ----------------------------------------------------
    def PasteFromGE(self):


        mapCanvas = self.iface.mapCanvas()
           
        copyText = QApplication.clipboard().text()


#---------       Fix bug paste multiholes  -------------------------

        copyText = copyText.replace("\t\t\t\t</LinearRing>\n\t\t\t\t<LinearRing>", "\t\t\t\t</LinearRing>\n\t\t\t</innerBoundaryIs>\n\t\t\t<innerBoundaryIs>\n\t\t\t\t<LinearRing>")

        copyText = copyText.replace("\t\t\t\t\t</LinearRing>\n\t\t\t\t\t<LinearRing>", "\t\t\t\t</LinearRing>\n\t\t\t</innerBoundaryIs>\n\t\t\t<innerBoundaryIs>\n\t\t\t\t<LinearRing>")

#---------       Fix bug paste multiholes  -------------------------

#        print copyText

        tumpdir = unicode(QFileInfo(QgsApplication.qgisUserDatabaseFilePath()).path()) + "/python/plugins/gearthview3/_WebServer"

#<Point>         GEKml_Points.kml
#<LineString>    GEKml_Lines.kml
#<Polygon>       GEKml_Polygons.kml


        # Tolgo i livelli precedenti
#        QgsMapLayerRegistry.instance().removeMapLayer("GEKml_Points")        
#        QgsMapLayerRegistry.instance().removeMapLayer("GEKml_Lines")        
#        QgsMapLayerRegistry.instance().removeMapLayer("GEKml_Polygons")

        for iLayer in range(mapCanvas.layerCount()):
          layer = mapCanvas.layer(iLayer)
          if (layer.name() == "GEKml_Points") or (layer.name() == "GEKml_Lines") or (layer.name() == "GEKml_Polygons"):
             QgsProject.instance().removeMapLayer(layer.id())
        

        GEKml_Points   = copyText.find("<Point>")
        GEKml_Lines    = copyText.find("<LineString>")
        GEKml_Polygons = copyText.find("<Polygon>")        


        if (GEKml_Polygons > 0):        

           salvalo2 = codecs.open(tumpdir + "/GEKml_Polygons.kml", 'w', encoding='utf-8')
           salvalo2.write (copyText)

           salvalo2.close()                

           vlayer = QgsVectorLayer(tumpdir + "/GEKml_Polygons.kml", "GEKml_Polygons", "ogr")
           QgsProject.instance().addMapLayer(vlayer)


        if (GEKml_Lines > 0):        

           salvalo2 = codecs.open(tumpdir + "/GEKml_Lines.kml", 'w', encoding='utf-8')
           salvalo2.write (copyText)

           salvalo2.close()                

           vlayer = QgsVectorLayer(tumpdir + "/GEKml_Lines.kml", "GEKml_Lines", "ogr")
           QgsProject.instance().addMapLayer(vlayer)


        if (GEKml_Points > 0):        

           salvalo2 = codecs.open(tumpdir + "/GEKml_Points.kml", 'w', encoding='utf-8')
           salvalo2.write (copyText)

           salvalo2.close()                

           vlayer = QgsVectorLayer(tumpdir + "/GEKml_Points.kml", "GEKml_Points", "ogr")
           QgsProject.instance().addMapLayer(vlayer)   


#  Dalla versione 2.14  QGIS permette di esportare anche la coordinata Z ---

#        if QGIS_VERSION_INT >= 21400:

           giaFatto = 0
           if (GEKml_Polygons > 0):
              ret = P3dPoints_Write(self, "GEKml_Polygons")
              giaFatto = 1

           if (GEKml_Lines > 0 and giaFatto == 0):
              ret = P3dPoints_Write(self, "GEKml_Lines")
              giaFatto = 1
              
           if (GEKml_Points > 0 and giaFatto == 0):
              ret = P3dPoints_Write(self, "GEKml_Points")
              giaFatto = 1              

           nomecsv = tumpdir + "/_3dPointsExport/GEKml_3dPoints.csv"
           nomecsv.replace("\\", "/") 
           uri = """file:///""" + nomecsv + """?"""
           uri += """type=csv&"""
           uri += """trimFields=no&"""
           uri += """xField=X&"""
           uri += """yField=Y&"""
           uri += """spatialIndex=yes&"""
           uri += """subsetIndex=no&"""
           uri += """watchFile=no&"""
           uri += """crs=epsg:4326"""

           for iLayer in range(mapCanvas.layerCount()):
               layer = mapCanvas.layer(iLayer)
               if (layer): 
                   if layer.name() == "GEKml_3dPoints":
                     QgsMapLayerRegistry.instance().removeMapLayer(layer.id())                  
                   if layer.name() == "GEKml_Extrusions":
                     QgsMapLayerRegistry.instance().removeMapLayer(layer.id())
                       
           vlayer = QgsVectorLayer(uri, "GEKml_3dPoints", "delimitedtext")

#           QgsMapLayerRegistry.instance().addMapLayer(vlayer)
           QgsProject.instance().addMapLayer(vlayer)
           
           nomeqml = tumpdir + "/_3dPointsExport/GEKml_3dPoints.qml"            
           nomeqml.replace("\\", "/")

           result = vlayer.loadNamedStyle(nomeqml)            


# FINE  QGis.QGIS_VERSION_INT >= 21400 ----------------------
                                             
#        vlayer.triggerRepaint()
            
        mapCanvas.refresh()   



    def run(self):
        """Run method that performs all the real work"""

#        # show the dialog
#        self.dlg.show()
#        # Run the dialog event loop
#        result = self.dlg.exec_()
#        # See if OK was pressed
#        if result:
#            # Do something useful here - delete the line containing pass and
#            # substitute with your code.
#            pass
            
        GDX_Publisher(self)
